import React, { useEffect, useState } from "react";
import axios from "axios";
import Table from "../../components/Table/Table";
import ClassModal from "./ClassModal";
import { Link } from "react-router-dom";
import "./Classes.css";
import { toast } from "react-toastify";

const API_URL = process.env.REACT_APP_API_URL || "http://localhost:8080";

const Classes = () => {
  const [classes, setClasses] = useState([]);
  const [teachers, setTeachers] = useState([]);   // d√πng ƒë·ªÉ hi·ªÉn th·ªã t√™n GV trong b·∫£ng
  const [subjects, setSubjects] = useState([]);

  const [sortColumn, setSortColumn] = useState(null);
  const [sortOrder, setSortOrder] = useState("asc");
  const [searchTerm, setSearchTerm] = useState("");
  const [searchType, setSearchType] = useState("subject");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingClass, setEditingClass] = useState(null);
  const [modalError, setModalError] = useState(null);

  useEffect(() => {
    fetchClasses();
    fetchTeachers();
    fetchSubjects();
  }, []);

const fetchClasses = async () => {
¬† ¬† try {
¬† ¬† ¬† // 2. S·ª≠a URL
¬† ¬† ¬† const res = await axios.get(`${API_URL}/classes`); // Thay ƒë·ªïi URL
¬† ¬† ¬† setClasses(res.data || []);
¬† ¬† } catch (e) {
¬† ¬† ¬† console.error("L·ªói khi l·∫•y danh s√°ch l·ªõp:", e);
¬† ¬† ¬† toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp. Vui l√≤ng th·ª≠ l·∫°i.");
¬† ¬† }
¬† };

const fetchTeachers = async () => {
¬† ¬† try {
¬† ¬† ¬† // 3. S·ª≠a URL
¬† ¬† ¬† const res = await axios.get(`${API_URL}/teachers`); // Thay ƒë·ªïi URL
¬† ¬† ¬† setTeachers(res.data || []);
¬† ¬† } catch (e) {
¬† ¬† ¬† console.error("L·ªói khi l·∫•y danh s√°ch gi·∫£ng vi√™n:", e);
¬† ¬† ¬† toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch gi·∫£ng vi√™n. Vui l√≤ng th·ª≠ l·∫°i.");
¬† ¬† }
¬† };

¬† const fetchSubjects = async () => {
¬† ¬† try {
¬† ¬† ¬† // 4. S·ª≠a URL
¬† ¬† ¬† const res = await axios.get(`${API_URL}/subjects`); // Thay ƒë·ªïi URL
¬† ¬† ¬† setSubjects(res.data || []);
¬† ¬† } catch (e) {
¬† ¬† ¬† console.error("L·ªói khi l·∫•y danh s√°ch m√¥n h·ªçc:", e);
¬† ¬† ¬† toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√¥n h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.");
¬† ¬† }
¬† };

  // ‚¨áÔ∏è H√ÄM M·ªöI: l·∫•y danh s√°ch GV ƒë√∫ng m√¥n (truy·ªÅn xu·ªëng Modal)
const getTeachersBySubject = async (subjectId) => {
¬† ¬† if (!subjectId) return [];
¬† ¬† try { // Th√™m try-catch
¬† ¬† ¬† // 5. S·ª≠a URL
¬† ¬† ¬† const res = await axios.get(`${API_URL}/teachers/subject/${subjectId}`); // Thay ƒë·ªïi URL (Gi·∫£ s·ª≠ API l√† /teachers/subject/{id})
¬† ¬† ¬† return res.data || [];
¬† ¬† } catch (e) {
¬† ¬† ¬† console.error(`L·ªói khi l·∫•y GV cho m√¥n h·ªçc ${subjectId}:`, e);
¬† ¬† ¬† toast.error(`Kh√¥ng th·ªÉ t·∫£i danh s√°ch GV cho m√¥n h·ªçc n√†y.`);
¬† ¬† ¬† return []; // Tr·∫£ v·ªÅ m·∫£ng r·ªóng khi l·ªói
¬† ¬† }
¬† };

  const getTeacherName = (teacherId) => {
    const t = teachers.find((x) => x.teacherId === teacherId);
    return t ? <Link to="/teachers">{t.name}</Link> : "Ch∆∞a g√°n";
  };

  const getSubjectName = (subjectId, fallback) => {
    if (fallback) return fallback;
    const s = subjects.find((x) => x.subjectId === subjectId);
    return s ? <Link to="/subjects">{s.subjectName}</Link> : (subjectId ? `#${subjectId}` : "Ch∆∞a g√°n");
  };

  const isoToVN = (s) => {
    if (!s) return "";
    const m = s.match(/^(\d{4})-(\d{2})-(\d{2})$/);
    return m ? `${m[3]}/${m[2]}/${m[1]}` : s;
  };
  const displayVN = (s) => (!s ? "" : (/^\d{2}\/\d{2}\/\d{4}$/.test(s) ? s : isoToVN(s)));
  const trimTime = (t) => (t ? t.slice(0, 5) : "");

  const handleSort = (columnKey) => {
    const isAsc = sortColumn === columnKey && sortOrder === "asc";
    const newSortOrder = isAsc ? "desc" : "asc";
    setSortColumn(columnKey);
    setSortOrder(newSortOrder);

    const sorted = [...classes].sort((a, b) => {
      const aVal = a[columnKey];
      const bVal = b[columnKey];
      if (typeof aVal === "string" && typeof bVal === "string") {
        return newSortOrder === "asc" ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
      } else if (typeof aVal === "number" && typeof bVal === "number") {
        return newSortOrder === "asc" ? aVal - bVal : bVal - aVal;
      } else {
        const toStr = (v) => (v == null ? "" : String(v));
        return newSortOrder === "asc" ? toStr(aVal).localeCompare(toStr(bVal)) : toStr(bVal).localeCompare(toStr(aVal));
      }
    });

    setClasses(sorted);
  };

  const handleAdd = () => {
    setEditingClass(null);
    setModalError(null);
    setIsModalOpen(true);
  };

  const handleEdit = (row) => {
    setEditingClass(row);
    setModalError(null);
    setIsModalOpen(true);
  };

const handleDelete = async (rowOrId) => {
¬† ¬† const id = typeof rowOrId === "object" ? rowOrId.classId : Number(rowOrId);
¬† ¬† if (!id) return;
¬† ¬† if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° l·ªõp n√†y?")) {
¬† ¬† ¬† try {
¬† ¬† ¬† ¬† // 6. S·ª≠a URL
¬† ¬† ¬† ¬† await axios.delete(`${API_URL}/classes/${id}`); // Thay ƒë·ªïi URL
¬† ¬† ¬† ¬† fetchClasses();
¬† ¬† ¬† ¬† toast.success("ƒê√£ xo√° l·ªõp th√†nh c√¥ng!");
¬† ¬† ¬† } catch (e) {
¬† ¬† ¬† ¬† console.error("L·ªói khi xo√° l·ªõp:", e);
¬† ¬† ¬† ¬† const msg = e?.response?.data?.message || "ƒê√£ x·∫£y ra l·ªói khi xo√°.";
¬† ¬† ¬† ¬† toast.error(msg);
¬† ¬† ¬† }
¬† ¬† }
¬† };

const handleSave = async (classData) => {
¬† ¬† try {
¬† ¬† ¬† if (editingClass) {
¬† ¬† ¬† ¬† // 7. S·ª≠a URL
¬† ¬† ¬† ¬† await axios.put(`${API_URL}/classes/${editingClass.classId}`, classData); // Thay ƒë·ªïi URL
¬† ¬† ¬† ¬† toast.success("C·∫≠p nh·∫≠t l·ªõp h·ªçc th√†nh c√¥ng!");
¬† ¬† ¬† } else {
¬† ¬† ¬† ¬† // 8. S·ª≠a URL
¬† ¬† ¬† ¬† await axios.post(`${API_URL}/classes`, classData); // Thay ƒë·ªïi URL
¬† ¬† ¬† ¬† toast.success("Th√™m l·ªõp h·ªçc m·ªõi th√†nh c√¥ng!");
¬† ¬† ¬† }
¬† ¬† ¬† fetchClasses();
¬† ¬† ¬† setIsModalOpen(false);
¬† ¬† ¬† setModalError(null);
¬† ¬† } catch (e) {
¬† ¬† ¬† console.error("L·ªói khi l∆∞u l·ªõp h·ªçc:", e);
¬† ¬† ¬† const msg = e?.response?.data?.message || "ƒê√£ x·∫£y ra l·ªói khi l∆∞u.";
¬† ¬† ¬† setModalError(msg);
¬† ¬† }
¬† };

  const columns = [
    { title: "ID", key: "classId", sortable: true },
    { title: "M√¥n h·ªçc", key: "subjectName", sortable: true },
    { title: "Gi·∫£ng vi√™n", key: "teacherId" },
    { title: "Ng√†y h·ªçc", key: "studyDate", sortable: true },
    { title: "Gi·ªù h·ªçc", key: "timeRange" },
    { title: "H·ªçc k·ª≥", key: "semester", sortable: true },
    { title: "NƒÉm h·ªçc", key: "academicYear", sortable: true },
    { title: "Ph√≤ng", key: "room" },
  ];

  const filtered = classes.filter((c) => {
    const q = (searchTerm || "").toLowerCase();
    if (!q) return true;
    switch (searchType) {
      case "classId":
        return String(c.classId || "").includes(q);
      case "semester":
        return (c.semester || "").toLowerCase().includes(q);
      case "subject":
      default: {
        const subjectText =
          (c.subjectName || "") ||
          (subjects.find((s) => s.subjectId === c.subjectId)?.subjectName || "");
        return subjectText.toLowerCase().includes(q);
      }
    }
  });

  const indexOfLast = currentPage * itemsPerPage;
  const indexOfFirst = indexOfLast - itemsPerPage;
  const currentList = filtered.slice(indexOfFirst, indexOfLast);
  const totalPages = Math.ceil(filtered.length / itemsPerPage);
  const paginate = (p) => setCurrentPage(p);

  const dataForTable = currentList.map((c) => ({
    ...c,
    subjectName: getSubjectName(c.subjectId, c.subjectName),
    teacherId: getTeacherName(c.teacherId),
    studyDate: displayVN(c.studyDate),
    timeRange: `${trimTime(c.startTime)} - ${trimTime(c.endTime)}`,
  }));

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setModalError(null);
  };

  return (
    <>
      <div className="page-container">
        <h2>Trang Qu·∫£n l√Ω L·ªõp h·ªçc</h2>

        <div className="search-pagination-controls">
          <div className="search-input-wrapper">
            <input
              type="text"
              placeholder={`T√¨m theo ${searchType === "subject" ? "M√¥n h·ªçc" : searchType === "classId" ? "ID" : "H·ªçc k·ª≥"}...`}
              value={searchTerm}
              onChange={(e) => { setSearchTerm(e.target.value); setCurrentPage(1); }}
              className="search-input"
            />
            <span className="search-icon">üîç</span>
          </div>

          <select
            value={searchType}
            onChange={(e) => setSearchType(e.target.value)}
            className="search-type-select"
          >
            <option value="subject">T√¨m theo M√¥n h·ªçc</option>
            <option value="classId">T√¨m theo ID</option>
            <option value="semester">T√¨m theo H·ªçc k·ª≥</option>
          </select>

          <button onClick={handleAdd} className="add-button">Th√™m L·ªõp h·ªçc</button>
        </div>

        <div className="table-scroll-container">
          <Table
            columns={columns}
            data={dataForTable}
            onEdit={handleEdit}
            onDelete={handleDelete}
            onSort={handleSort}
            sortColumn={sortColumn}
            sortOrder={sortOrder}
          />
        </div>

        <div className="pagination">
          <button onClick={() => paginate(currentPage - 1)} disabled={currentPage === 1}>Tr∆∞·ªõc</button>
          {[...Array(totalPages)].map((_, i) => (
            <button key={i + 1} onClick={() => paginate(i + 1)} className={currentPage === i + 1 ? "active" : ""}>
              {i + 1}
            </button>
          ))}
          <button onClick={() => paginate(currentPage + 1)} disabled={currentPage === totalPages}>Ti·∫øp</button>
        </div>
      </div>

      <ClassModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSave}
        classInfo={editingClass}
        serverError={modalError}
        subjects={subjects}
        // ‚úÖ Ch·ªâ s·ª≠a ph·∫ßn gi·∫£ng vi√™n: truy·ªÅn h√†m l·∫•y GV theo m√¥n
        getTeachersBySubject={getTeachersBySubject}
      />
    </>
  );
};

export default Classes;
